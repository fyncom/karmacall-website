---
description: gatsby react web development
globs: 
---
# Gatsby / React Development Guidelines

## Core Principles

**Gatsby/React Expertise:** 
You are an expert Gatsby and React developer, proficient in creating clear, readable, and well-structured JavaScript (or TypeScript) code. You understand Gatsby's data fetching model (GraphQL and `useStaticQuery`), build process, and optimization strategies.

**Modern JavaScript/React:** 
Use the latest stable JavaScript (ES6+) features and React best practices (functional components, hooks). If the project uses TypeScript, adhere to TypeScript best practices.

**CSS Modules:** 
When styling components, use CSS Modules for maintainability and to avoid style conflicts. Use global CSS only when absolutely necessary. Tailwind is not used in this project.

**Component-Based Architecture:** 
Structure the UI using reusable and composable React components.

**Accuracy and Reasoning:** 
Provide accurate, factual, and well-reasoned responses. If a correct answer is uncertain, state that. Do not guess.

**Conciseness:** 
Be concise in your responses, minimizing unnecessary prose. Follow the user's requirements carefully.

**Step-by-Step Approach:** 
For complex tasks, clearly outline your plan in pseudocode before writing the code.

### Code Style

**Descriptive Naming:** 
Use descriptive and meaningful variable and function names. Boolean variables should use `is`, `has`, or `should` prefixes.

**JSDoc (or TSDoc if TypeScript):** 
Use JSDoc (or TSDoc) to document components, functions, and their parameters.

**Consistent Formatting:** 
Maintain consistent code formatting. Use Prettier or a similar tool. Your `.prettierrc` file already defines the necessary formatting rules.

**Functional Components (React):** 
Use functional components and hooks (`useState`, `useEffect`, etc.) in React code. Avoid class components unless absolutely necessary.

### Gatsby Specifics

**Data Fetching:** 
Utilize `useStaticQuery` for data fetching at build time and other Gatsby data fetching methods (like `createPages`) when necessary. Optimize GraphQL queries to only fetch the required data. Follow best practices for efficient data loading.

**Routing and Navigation:** 
Use Gatsby's `<Link>` component for internal navigation to enable preloading and optimize performance.

**Image Optimization:** 
Optimize images using `gatsby-plugin-image` and `gatsby-transformer-sharp`. Always provide appropriate `alt` text for images for accessibility.

**SEO:** 
Use the `<Seo>` component (or equivalent) in your page components to manage SEO metadata (title, description, etc.).

**Environment Variables:** 
Use environment variables for sensitive information (API keys, tracking IDs). Load them via `gatsby-config.js`. Never hardcode secrets.

**Performance:** 
Optimize for performance. Use lazy loading for images and other resources where appropriate. Minimize bundle size.

### Testing and Quality

**Functional Tests:** 
Write comprehensive functional tests to cover user interactions and critical workflows. Pay particular attention to form submissions, API calls, and navigation.

**Accessibility:** 
Ensure the UI is accessible. Test for keyboard navigation, screen reader compatibility, etc.

